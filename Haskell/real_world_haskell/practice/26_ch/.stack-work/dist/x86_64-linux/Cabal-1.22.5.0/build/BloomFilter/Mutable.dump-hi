
==================== FINAL INTERFACE ====================
2016-09-08 04:42:49.484092 UTC

interface rwhbl_8NPN1FDCpGGBlCB0OJXzw7:BloomFilter.Mutable 7103
  interface hash: f4a2f40abc50bfb1fcb5fcccc91e4917
  ABI hash: c5411d9500460bfd5214cedac7d3326e
  export-list hash: 8bda47db1bba5e73f4c059cf6d64a4ce
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8b014af08ce3962903c3ca7bfd22116d
  sig of: Nothing
  used TH splices: False
  where
exports:
  BloomFilter.Mutable.elem
  BloomFilter.Mutable.insert
  BloomFilter.Mutable.length
  BloomFilter.Mutable.new
  BloomFilter.Mutable.notElem
  BloomFilter.Internal.MutBloom
module dependencies: BloomFilter.Internal
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0 ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
import  -/  array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA:Data.Array.Base a0576aaf9a801948417a257cfc0c6084
import  -/  array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA:Data.Array.MArray 4d365d121c7abb8a95cfe84459ec35d8
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Control.Monad.ST 65e1a876a6fbc0923608cbfe8fcfe7e6
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:Data.Word ec8deb535202352cc8b509b14004bcbd
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Enum debc6de3086023a15993ab0cecffb90b
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.ST cebc788374fb85d3b05c02529a08e594
import  -/  base-4.8.2.0:GHC.Word 10dc88543d98000abab9695a1019767d
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  BloomFilter.Internal 9dc4e26adddcfdb4e51228eb8da14774
  exports: 10c4fad2a35384c4953ab113ed84de9d
  MB 053c35bde3057608556fc963c0454c9d
  MutBloom 5b41d7537f55c94ad47630eb9b9503d3
  mutArray 1457353db06275a8c255f10e6761f8fb
  mutHash 0feb327a9bb6d55db977dee9dcad7a41
502f4d746393c81da5541a4eaa54ef18
  $wa ::
    a
    -> (a -> [GHC.Word.Word32])
    -> GHC.Word.Word32
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# s
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, GHC.Types.Bool #)
  {- Arity: 7, Strictness: <L,U><L,1*C1(U)><S,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ s
                   w :: a
                   ww :: a -> [GHC.Word.Word32]
                   ww1 :: GHC.Word.Word32
                   ww2 :: GHC.Prim.Word#
                   ww3 :: GHC.Prim.Int#
                   ww4 :: GHC.Prim.MutableByteArray# s
                   w1 :: GHC.Prim.State# s[OneShot] ->
                 let {
                   modulus :: GHC.Word.Word32
                   = case ww2 of wild1 {
                       DEFAULT
                       -> GHC.Word.W32#
                            (GHC.Prim.narrow32Word# (GHC.Prim.plusWord# wild1 __word 1))
                       __word 4294967295 -> GHC.Word.$fEnumWord6 }
                 } in
                 (BloomFilter.Mutable.allM
                    @ GHC.Word.Word32
                    @ (GHC.ST.ST s)
                    (BloomFilter.Mutable.elem3 @ s)
                    (Data.Array.Base.readArray
                       @ (Data.Array.Base.STUArray s)
                       @ GHC.Word.Word32
                       @ GHC.Types.Bool
                       @ (GHC.ST.ST s)
                       (BloomFilter.Mutable.elem2 @ s)
                       GHC.Word.$fIxWord32
                       (Data.Array.Base.STUArray
                          @ s
                          @ GHC.Word.Word32
                          @ GHC.Types.Bool
                          ww1
                          (GHC.Word.W32# ww2)
                          ww3
                          ww4))
                    (GHC.Base.map
                       @ GHC.Word.Word32
                       @ GHC.Word.Word32
                       (\ ds :: GHC.Word.Word32 ->
                        GHC.Word.$fIntegralWord32_$cmod ds modulus)
                       (ww w)))
                   `cast`
                 (GHC.ST.NTCo:ST[0] <s>_N <GHC.Types.Bool>_R)
                   w1) -}
7241eb4a7adc85e2a6d566116a9a06ac
  $wa1 ::
    (a -> [GHC.Word.Word32])
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# s
    -> a
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, () #)
  {- Arity: 7, Strictness: <L,1*C1(U)><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ s
                   @ a
                   ww :: a -> [GHC.Word.Word32]
                   ww1 :: GHC.Prim.Word#
                   ww2 :: GHC.Prim.Word#
                   ww3 :: GHC.Prim.Int#
                   ww4 :: GHC.Prim.MutableByteArray# s
                   w :: a
                   w1 :: GHC.Prim.State# s[OneShot] ->
                 letrec {
                   a1 :: [GHC.Word.Word32]
                         -> GHC.Prim.State# s -> (# GHC.Prim.State# s, () #)
                     {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ ds :: [GHC.Word.Word32] eta :: GHC.Prim.State# s[OneShot] ->
                     case ds of wild {
                       [] -> (# eta, GHC.Tuple.() #)
                       : y ys
                       -> case y of wild2 { GHC.Word.W32# b1 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.leWord# ww1 b1) of wild3 {
                            GHC.Types.False
                            -> case GHC.Arr.hopelessIndexError
                               ret_ty (# GHC.Prim.State# s, () #)
                               of {}
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.leWord# b1 ww2) of wild1 {
                                 GHC.Types.False
                                 -> case GHC.Arr.hopelessIndexError
                                    ret_ty (# GHC.Prim.State# s, () #)
                                    of {}
                                 GHC.Types.True
                                 -> let {
                                      y1 :: GHC.Prim.Int#
                                      = GHC.Prim.word2Int#
                                          (GHC.Prim.narrow32Word# (GHC.Prim.minusWord# b1 ww1))
                                    } in
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.<=# 0 y1) of wild5 {
                                      GHC.Types.False
                                      -> case BloomFilter.Mutable.insert2 y1 ww3
                                         ret_ty (# GHC.Prim.State# s, () #)
                                         of {}
                                      GHC.Types.True
                                      -> case GHC.Prim.tagToEnum#
                                                @ GHC.Types.Bool
                                                (GHC.Prim.<# y1 ww3) of wild6 {
                                           GHC.Types.False
                                           -> case BloomFilter.Mutable.insert2 y1 ww3
                                              ret_ty (# GHC.Prim.State# s, () #)
                                              of {}
                                           GHC.Types.True
                                           -> let {
                                                j# :: GHC.Prim.Int#
                                                = GHC.Prim.uncheckedIShiftRA# y1 6
                                              } in
                                              case GHC.Prim.readWordArray#
                                                     @ s
                                                     ww4
                                                     j#
                                                     eta of ds4 { (#,#) ipv ipv1 ->
                                              case GHC.Prim.writeWordArray#
                                                     @ s
                                                     ww4
                                                     j#
                                                     (GHC.Prim.or#
                                                        ipv1
                                                        (GHC.Prim.uncheckedShiftL#
                                                           __word 1
                                                           (GHC.Prim.word2Int#
                                                              (GHC.Prim.and#
                                                                 (GHC.Prim.int2Word# y1)
                                                                 __word 63))))
                                                     ipv of s3# { DEFAULT ->
                                              a1 ys s3# } } } } } } } }
                 } in
                 let {
                   modulus :: GHC.Word.Word32
                   = case ww2 of wild1 {
                       DEFAULT
                       -> GHC.Word.W32#
                            (GHC.Prim.narrow32Word# (GHC.Prim.plusWord# wild1 __word 1))
                       __word 4294967295 -> GHC.Word.$fEnumWord6 }
                 } in
                 a1
                   (GHC.Base.map
                      @ GHC.Word.Word32
                      @ GHC.Word.Word32
                      (\ ds :: GHC.Word.Word32 ->
                       GHC.Word.$fIntegralWord32_$cmod ds modulus)
                      (ww w))
                   w1) -}
e379952419a2b61693d3aa3a3bef046a
  $wa2 ::
    (a -> [GHC.Word.Word32])
    -> GHC.Prim.Word#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, BloomFilter.Internal.MutBloom s a #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ @ a
                   @ s
                   w :: a -> [GHC.Word.Word32]
                   ww :: GHC.Prim.Word#
                   w1 :: GHC.Prim.State# s[OneShot] ->
                 let {
                   b1 :: GHC.Prim.Word#
                   = GHC.Prim.narrow32Word# (GHC.Prim.minusWord# ww __word 1)
                 } in
                 let {
                   x :: GHC.Prim.Int#
                   = GHC.Prim.+# (GHC.Prim.word2Int# (GHC.Prim.narrow32Word# b1)) 1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# x 0) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.newByteArray#
                             @ s
                             (GHC.Prim.uncheckedIShiftRA# (GHC.Prim.+# x 63) 3)
                             w1 of ds1 { (#,#) ipv ipv1 ->
                      let {
                        n'# :: GHC.Prim.Int#
                        = GHC.Prim.uncheckedIShiftRA# (GHC.Prim.+# x 63) 6
                      } in
                      letrec {
                        loop :: GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
                          {- Arity: 2, Strictness: <L,U><L,U> -}
                        = \ i# :: GHC.Prim.Int# s3# :: GHC.Prim.State# s[OneShot] ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# i# n'#) of wild4 {
                            GHC.Types.False
                            -> case GHC.Prim.writeWordArray#
                                      @ s
                                      ipv1
                                      i#
                                      __word 0
                                      s3# of s4# { DEFAULT ->
                               loop (GHC.Prim.+# i# 1) s4# }
                            GHC.Types.True -> s3# }
                      } in
                      case loop 0 ipv of s3# { DEFAULT ->
                      (# s3#,
                         BloomFilter.Internal.MB
                           @ s
                           @ a
                           w
                           (Data.Array.Base.STUArray
                              @ s
                              @ GHC.Word.Word32
                              @ GHC.Types.Bool
                              BloomFilter.Mutable.new3
                              (GHC.Word.W32# b1)
                              x
                              ipv1) #) } }
                   GHC.Types.True
                   -> case BloomFilter.Mutable.new2
                      ret_ty (# GHC.Prim.State# s, BloomFilter.Internal.MutBloom s a #)
                      of {} }) -}
02f58a9bb8dfb7b4fb8ebc87f247be1e
  allM ::
    GHC.Base.Monad m =>
    (a -> m GHC.Types.Bool) -> [a] -> m GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,U(A,C(C1(U)),A,C(U),A)><L,C(U)><S,1*U> -}
a5e5799e8e358b911a106984058e0afe
  elem ::
    a
    -> BloomFilter.Internal.MutBloom s a -> GHC.ST.ST s GHC.Types.Bool
  {- Arity: 3,
     Strictness: <L,U><S(LS(SSLL)),U(1*C1(U),U(U,U(U),U,U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                BloomFilter.Mutable.elem1
                  `cast`
                (forall a s.
                 <a>_R
                 ->_R <BloomFilter.Internal.MutBloom s a>_R
                 ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <GHC.Types.Bool>_R)) -}
111c88f324800f3f94ff0cfcaf62fdbf
  elem1 ::
    a
    -> BloomFilter.Internal.MutBloom s a
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, GHC.Types.Bool #)
  {- Arity: 3,
     Strictness: <L,U><S(LS(SSLL)),U(1*C1(U),U(U,U(U),U,U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ s
                   w :: a
                   w1 :: BloomFilter.Internal.MutBloom s a
                   w2 :: GHC.Prim.State# s[OneShot] ->
                 case w1 of ww { BloomFilter.Internal.MB ww1 ww2 ->
                 case ww2 of ww3 { Data.Array.Base.STUArray ww4 ww5 ww6 ww7 ->
                 case ww5 of ww8 { GHC.Word.W32# ww9 ->
                 BloomFilter.Mutable.$wa @ a @ s w ww1 ww4 ww9 ww6 ww7 w2 } } }) -}
8e3c0c03324808cf8a6b1317c65cc9c6
  elem2 ::
    Data.Array.Base.MArray
      (Data.Array.Base.STUArray s) GHC.Types.Bool (GHC.ST.ST s)
  {- Unfolding: (\ @ s ->
                 Data.Array.Base.$fMArraySTUArrayBoolST
                   @ s
                   (BloomFilter.Mutable.elem3 @ s)) -}
1d36e2dbab02ff88b50455ee838ca5c5
  elem3 :: GHC.Base.Monad (GHC.ST.ST s)
  {- Unfolding: (\ @ s ->
                 GHC.ST.$fMonadST @ s (BloomFilter.Mutable.elem4 @ s)) -}
2fd2ea5b4507f3f50d83b24c53a3b573
  elem4 :: GHC.Base.Applicative (GHC.ST.ST s)
  {- Unfolding: (\ @ s ->
                 GHC.ST.$fApplicativeST @ s (GHC.ST.$fFunctorST @ s)) -}
27067743afc53297ea2f0004c10f1f1f
  insert :: BloomFilter.Internal.MutBloom s a -> a -> GHC.ST.ST s ()
  {- Arity: 3,
     Strictness: <S(LS(SSLL)),U(1*C1(U),U(U(U),U(U),U,U))><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                BloomFilter.Mutable.insert1
                  `cast`
                (forall s a.
                 <BloomFilter.Internal.MutBloom s a>_R
                 ->_R <a>_R
                 ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <()>_R)) -}
656e02729d7153a569fe93d8aae34f1b
  insert1 ::
    BloomFilter.Internal.MutBloom s a
    -> a -> GHC.Prim.State# s -> (# GHC.Prim.State# s, () #)
  {- Arity: 3,
     Strictness: <S(LS(SSLL)),U(1*C1(U),U(U(U),U(U),U,U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   @ a
                   w :: BloomFilter.Internal.MutBloom s a
                   w1 :: a
                   w2 :: GHC.Prim.State# s[OneShot] ->
                 case w of ww { BloomFilter.Internal.MB ww1 ww2 ->
                 case ww2 of ww3 { Data.Array.Base.STUArray ww4 ww5 ww6 ww7 ->
                 case ww4 of ww8 { GHC.Word.W32# ww9 ->
                 case ww5 of ww10 { GHC.Word.W32# ww11 ->
                 BloomFilter.Mutable.$wa1
                   @ s
                   @ a
                   ww1
                   ww9
                   ww11
                   ww6
                   ww7
                   w1
                   w2 } } } }) -}
ed81b6d7ff2e9c44cdf5626c2fb67b9e
  insert2 :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Types.Int
  {- Arity: 2, Strictness: <L,U><L,U>b -}
6cb6eeacf159535a5734b4194da0673b
  length ::
    BloomFilter.Internal.MutBloom s a -> GHC.ST.ST s GHC.Word.Word32
  {- Arity: 2,
     Strictness: <S(LS(SSLL)),1*U(A,1*U(1*H,U(1*U),A,A))><L,U>,
     Unfolding: InlineRule (0, True, True)
                BloomFilter.Mutable.length1
                  `cast`
                (forall s a.
                 <BloomFilter.Internal.MutBloom s a>_R
                 ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <GHC.Word.Word32>_R)) -}
ae3b00a10ea05be4afea626fb24c1c86
  length1 ::
    BloomFilter.Internal.MutBloom s a
    -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Word.Word32 #)
  {- Arity: 2,
     Strictness: <S(LS(SSLL)),1*U(A,1*U(1*H,U(1*U),A,A))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ a
                   filt :: BloomFilter.Internal.MutBloom s a
                   s1 :: GHC.Prim.State# s[OneShot] ->
                 case filt of wild { BloomFilter.Internal.MB ds1 ds2 ->
                 case ds2 of wild1 { Data.Array.Base.STUArray l u dt ds4 ->
                 (# s1,
                    case u of wild2 { GHC.Word.W32# a1 ->
                    case a1 of wild3 {
                      DEFAULT
                      -> GHC.Word.W32#
                           (GHC.Prim.narrow32Word# (GHC.Prim.plusWord# wild3 __word 1))
                      __word 4294967295 -> GHC.Word.$fEnumWord6 } } #) } }) -}
64f0c54f1649e95f5af4cda80595cf7b
  new ::
    (a -> [GHC.Word.Word32])
    -> GHC.Word.Word32
    -> GHC.ST.ST s (BloomFilter.Internal.MutBloom s a)
  {- Arity: 3, Strictness: <L,U><S,1*U(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                BloomFilter.Mutable.new1
                  `cast`
                (forall a s.
                 <a -> [GHC.Word.Word32]>_R
                 ->_R <GHC.Word.Word32>_R
                 ->_R Sym (GHC.ST.NTCo:ST[0]
                               <s>_N <BloomFilter.Internal.MutBloom s a>_R)) -}
29ad701848f2e6b85be94653c26e9f24
  new1 ::
    (a -> [GHC.Word.Word32])
    -> GHC.Word.Word32
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, BloomFilter.Internal.MutBloom s a #)
  {- Arity: 3, Strictness: <L,U><S,1*U(U)><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ s
                   w :: a -> [GHC.Word.Word32]
                   w1 :: GHC.Word.Word32
                   w2 :: GHC.Prim.State# s[OneShot] ->
                 case w1 of ww { GHC.Word.W32# ww1 ->
                 BloomFilter.Mutable.$wa2 @ a @ s w ww1 w2 }) -}
afef435fe6014cae45fc84113fbf6393
  new2 :: GHC.Types.Int
  {- Strictness: b -}
634899987697a34da64658fd11dece39
  new3 :: GHC.Word.Word32
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W32# __word 0) -}
1879f1a3911da610d5fcd716677fb06b
  notElem ::
    a
    -> BloomFilter.Internal.MutBloom s a -> GHC.ST.ST s GHC.Types.Bool
  {- Arity: 3,
     Strictness: <L,U><S(LS(SSLL)),U(C(U),U(U,U(U),U,U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                BloomFilter.Mutable.notElem1
                  `cast`
                (forall a s.
                 <a>_R
                 ->_R <BloomFilter.Internal.MutBloom s a>_R
                 ->_R Sym (GHC.ST.NTCo:ST[0] <s>_N <GHC.Types.Bool>_R)) -}
439717e8b4267ecb6e922c3c0ca3517c
  notElem1 ::
    a
    -> BloomFilter.Internal.MutBloom s a
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, GHC.Types.Bool #)
  {- Arity: 3,
     Strictness: <L,U><S(LS(SSLL)),U(C(U),U(U,U(U),U,U))><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ s
                   elt :: a
                   filt :: BloomFilter.Internal.MutBloom s a
                   s1 :: GHC.Prim.State# s[OneShot] ->
                 case BloomFilter.Mutable.elem1
                        @ a
                        @ s
                        elt
                        filt
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case ipv1 of wild {
                      GHC.Types.False -> GHC.Types.True
                      GHC.Types.True -> GHC.Types.False } #) }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

