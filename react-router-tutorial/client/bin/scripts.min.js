!function e(t,r,n){function o(a,c){if(!r[a]){if(!t[a]){var i="function"==typeof require&&require;if(!c&&i)return i(a,!0);if(u)return u(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var f=r[a]={exports:{}};t[a][0].call(f.exports,function(e){var r=t[a][1][e];return o(r?r:e)},f,f.exports,e,t,r,n)}return r[a].exports}for(var u="function"==typeof require&&require,a=0;a<n.length;a++)o(n[a]);return o}({1:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}var o=e("react"),u=n(o),a=e("react-dom"),c=n(a),i=e("react-router"),l=e("./components/Main"),f=n(l),p=e("./components/About"),s=n(p),d=e("./components/Repos"),b=n(d),y=document.getElementById("app");c["default"].render(u["default"].createElement(i.Router,{history:i.hashHistory},u["default"].createElement(i.Route,{path:"/",component:f["default"]},u["default"].createElement(i.Route,{path:"/about",component:s["default"]}),u["default"].createElement(i.Route,{path:"/repos",component:b["default"]}))),y)},{"./components/About":2,"./components/Main":3,"./components/Repos":4,react:"react","react-dom":"react-dom","react-router":"react-router"}],2:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(r,"__esModule",{value:!0});var c=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=e("react"),l=n(i),f=function(e){function t(){return o(this,t),u(this,Object.getPrototypeOf(t).apply(this,arguments))}return a(t,e),c(t,[{key:"render",value:function(){return l["default"].createElement("div",null,"About")}}]),t}(l["default"].Component);r["default"]=f},{react:"react"}],3:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(r,"__esModule",{value:!0});var c=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=e("react"),l=n(i),f=e("react-router"),p=function(e){function t(e){return o(this,t),u(this,Object.getPrototypeOf(t).call(this,e))}return a(t,e),c(t,[{key:"render",value:function(){return l["default"].createElement("div",null,l["default"].createElement("h1",null,"React Router Tutorial"),l["default"].createElement("ul",{role:"nav"},l["default"].createElement("li",null,l["default"].createElement(f.Link,{to:"/about"},"About")),l["default"].createElement("li",null,l["default"].createElement(f.Link,{to:"/repos"},"Repos"))),this.props.children)}}]),t}(l["default"].Component);r["default"]=p},{react:"react","react-router":"react-router"}],4:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(r,"__esModule",{value:!0});var c=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=e("react"),l=n(i),f=function(e){function t(){return o(this,t),u(this,Object.getPrototypeOf(t).apply(this,arguments))}return a(t,e),c(t,[{key:"render",value:function(){return l["default"].createElement("div",null,"Repos")}}]),t}(l["default"].Component);r["default"]=f},{react:"react"}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,
